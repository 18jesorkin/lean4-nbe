{"99": "<code>ExpT (?m.1379 ⇒' ?m.1380 ⇒' Ty.Nat ⇒' ?m.1379)</code>",
 "98":
 "<code>convrT.recN_zero {α x✝ : Ty} {recN : ExpT (α ⇒' x✝ ⇒' Ty.Nat ⇒' α)} {e : ExpT α} {f : ExpT x✝} :\n  convrT (recN ⬝ e ⬝ f ⬝ ExpT.zero) e</code>",
 "97": "<code>ExpT ?m.1008</code>",
 "96": "<code>ExpT (?m.1008 ⇒' ?m.1112)</code>",
 "95":
 "<code>convrT.app {α x✝ : Ty} {a b : ExpT (x✝ ⇒' α)} {c d : ExpT x✝} : convrT a b → convrT c d → convrT (a ⬝ c) (b ⬝ d)</code>",
 "94": "<code>ExpT ?m.636</code>",
 "93": "<code>ExpT (?m.636 ⇒' ?m.850)</code>",
 "92": "<code>ExpT (?m.636 ⇒' ?m.850 ⇒' ?m.742)</code>",
 "91":
 "<code>ExpT ((?m.636 ⇒' ?m.850 ⇒' ?m.742) ⇒' (?m.636 ⇒' ?m.850) ⇒' ?m.636 ⇒' ?m.742)</code>",
 "90":
 "<code>convrT.S {α x✝ x✝¹ : Ty} {S : ExpT ((x✝ ⇒' x✝¹ ⇒' α) ⇒' (x✝ ⇒' x✝¹) ⇒' x✝ ⇒' α)} {x : ExpT (x✝ ⇒' x✝¹ ⇒' α)}\n  {y : ExpT (x✝ ⇒' x✝¹)} {z : ExpT x✝} : convrT (S ⬝ x ⬝ y ⬝ z) (x ⬝ z ⬝ (y ⬝ z))</code>",
 "9":
 "<code>convr.assoc {α : Type} {e e' e'' : Exp α} : convr ((e ⬝ e') ⬝ e'') (e ⬝ (e' ⬝ e''))</code>",
 "89": "<code>ExpT ?m.257</code>",
 "88": "<code>ExpT ?m.256</code>",
 "87": "<code>ExpT (?m.256 ⇒' ?m.257 ⇒' ?m.256)</code>",
 "86":
 "<code>convrT.K {α x✝ : Ty} {K : ExpT (α ⇒' x✝ ⇒' α)} {x : ExpT α} {y : ExpT x✝} : convrT (K ⬝ x ⬝ y) x</code>",
 "85": "<code>ExpT ?m.77</code>",
 "84":
 "<code>convrT.trans {α : Ty} {e e' e'' : ExpT α} : convrT e e' → convrT e' e'' → convrT e e''</code>",
 "83": "<code>ExpT ?m.42</code>",
 "82":
 "<code>convrT.sym {α : Ty} {e e' : ExpT α} : convrT e e' → convrT e' e</code>",
 "81": "<code>ExpT ?m.22</code>",
 "80": "<code>convrT.refl {α : Ty} {e : ExpT α} : convrT e e</code>",
 "8": "<code>Exp (α : Type) : Type</code>",
 "79": "<code>ExpT : Ty → Type</code>",
 "78": "<code>_root_.convrT {α : Ty} : ExpT α → ExpT α → Prop</code>",
 "77":
 "<code>ExpT.recN {a : Ty} : ExpT (a ⇒' (Ty.Nat ⇒' a ⇒' a) ⇒' Ty.Nat ⇒' a)</code>",
 "76": "<code>ExpT.succ : ExpT (Ty.Nat ⇒' Ty.Nat)</code>",
 "75": "<code>ExpT.zero : ExpT Ty.Nat</code>",
 "74": "<code>ExpT.App {a b : Ty} : ExpT (a ⇒' b) → ExpT a → ExpT b</code>",
 "73":
 "<code>ExpT.S {a b c : Ty} : ExpT ((a ⇒' b ⇒' c) ⇒' (a ⇒' b) ⇒' a ⇒' c)</code>",
 "72": "<code>Ty</code>",
 "71": "<code>ExpT.K {a b : Ty} : ExpT (a ⇒' b ⇒' a)</code>",
 "70": "<code>Ty : Type</code>",
 "7": "<code>_root_.convr {α : Type} : Exp α → Exp α → Prop</code>",
 "69": "<code>_root_.ExpT : Ty → Type</code>",
 "68": "<code><span class=\"literal string\">\" ⇒' \"</span> : String</code>",
 "67":
 "<code class=\"docstring\">Makes names from other namespaces visible without writing the namespace prefix.\n\nNames that are made available with `open` are visible within the current `section` or `namespace`\nblock. This makes referring to (type) definitions and theorems easier, but note that it can also\nmake [scoped instances], notations, and attributes from a different namespace available.\n\nThe `open` command can be used in a few different ways:\n\n* `open Some.Namespace.Path1 Some.Namespace.Path2` makes all non-protected names in\n  `Some.Namespace.Path1` and `Some.Namespace.Path2` available without the prefix, so that\n  `Some.Namespace.Path1.x` and `Some.Namespace.Path2.y` can be referred to by writing only `x` and\n  `y`.\n\n* `open Some.Namespace.Path hiding def1 def2` opens all non-protected names in `Some.Namespace.Path`\n  except `def1` and `def2`.\n\n* `open Some.Namespace.Path (def1 def2)` only makes `Some.Namespace.Path.def1` and\n  `Some.Namespace.Path.def2` available without the full prefix, so `Some.Namespace.Path.def3` would\n  be unaffected.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open Some.Namespace.Path renaming def1 → def1', def2 → def2'` same as `open Some.Namespace.Path\n  (def1 def2)` but `def1`/`def2`'s names are changed to `def1'`/`def2'`.\n\n  This works even if `def1` and `def2` are `protected`.\n\n* `open scoped Some.Namespace.Path1 Some.Namespace.Path2` **only** opens [scoped instances],\n  notations, and attributes from `Namespace1` and `Namespace2`; it does **not** make any other name\n  available.\n\n* `open &lt;any of the open shapes above&gt; in` makes the names `open`-ed visible only in the next\n  command or expression.\n\n[scoped instance]: https://lean-lang.org/theorem_proving_in_lean4/type_classes.html#scoped-instances\n(Scoped instances in Theorem Proving in Lean)\n\n\n## Examples\n\n```lean\n/-- SKI combinators https://en.wikipedia.org/wiki/SKI_combinator_calculus -/\nnamespace Combinator.Calculus\n  def I (a : α) : α := a\n  def K (a : α) : β → α := fun _ =&gt; a\n  def S (x : α → β → γ) (y : α → β) (z : α) : γ := x z (y z)\nend Combinator.Calculus\n\nsection\n  -- open everything under `Combinator.Calculus`, *i.e.* `I`, `K` and `S`,\n  -- until the section ends\n  open Combinator.Calculus\n\n  theorem SKx_eq_K : S K x = I := rfl\nend\n\n-- open everything under `Combinator.Calculus` only for the next command (the next `theorem`, here)\nopen Combinator.Calculus in\ntheorem SKx_eq_K' : S K x = I := rfl\n\nsection\n  -- open only `S` and `K` under `Combinator.Calculus`\n  open Combinator.Calculus (S K)\n\n  theorem SKxy_eq_y : S K x y = y := rfl\n\n  -- `I` is not in scope, we have to use its full path\n  theorem SKxy_eq_Iy : S K x y = Combinator.Calculus.I y := rfl\nend\n\nsection\n  open Combinator.Calculus\n    renaming\n      I → identity,\n      K → konstant\n\n  #check identity\n  #check konstant\nend\n\nsection\n  open Combinator.Calculus\n    hiding S\n\n  #check I\n  #check K\nend\n\nsection\n  namespace Demo\n    inductive MyType\n    | val\n\n    namespace N1\n      scoped infix:68 \" ≋ \" =&gt; BEq.beq\n\n      scoped instance : BEq MyType where\n        beq _ _ := true\n\n      def Alias := MyType\n    end N1\n  end Demo\n\n  -- bring `≋` and the instance in scope, but not `Alias`\n  open scoped Demo.N1\n\n  #check Demo.MyType.val == Demo.MyType.val\n  #check Demo.MyType.val ≋ Demo.MyType.val\n  -- #check Alias -- unknown identifier 'Alias'\nend\n```\n</code>",
 "66": "<code>Ty.arrow : Ty → Ty → Ty</code>",
 "65": "<code>Ty.Nat : Ty</code>",
 "64": "<code>_root_.Ty : Type</code>",
 "63":
 "<code>_root_.example3' : ((one ⬝ two) ⬝ ((zero ⬝ zero) ⬝ three)) ~ ((zero ⬝ (one ⬝ zero)) ⬝ ((zero ⬝ two) ⬝ (three ⬝ zero)))</code>",
 "62":
 "<code>_root_.example2' : ((zero ⬝ (one ⬝ zero)) ⬝ ((zero ⬝ two) ⬝ (three ⬝ zero))) ~ (one ⬝ (two ⬝ (three ⬝ zero)))</code>",
 "61":
 "<code>rfl.{u} {α : Sort u} {a : α} : a = a</code><span class=\"sep\"></span><code class=\"docstring\">`rfl : a = a` is the unique constructor of the equality type. This is the\nsame as `Eq.refl` except that it takes `a` implicitly instead of explicitly.\n\nThis is a more powerful theorem than it may appear at first, because although\nthe statement of the theorem is `a = a`, Lean will allow anything that is\ndefinitionally equal to that type. So, for instance, `2 + 2 = 4` is proven in\nLean by `rfl`, because both sides are the same up to definitional equality.\n</code>",
 "60":
 "<code>Iff.mpr {a b : Prop} (self : a ↔ b) : b → a</code><span class=\"sep\"></span><code class=\"docstring\">Modus ponens for if and only if, reversed. If `a ↔ b` and `b`, then `a`. </code>",
 "6": "<code><span class=\"literal string\">\" ⬝ \"</span> : String</code>",
 "59":
 "<code>correctness {α : Type} {e e' : Exp α} : e ~ e' ↔ nbe e = nbe e'</code>",
 "58":
 "<code class=\"docstring\">`exact e` closes the main goal if its target type matches that of `e`.\n</code>",
 "57":
 "<code>_root_.example1' : ((one ⬝ two) ⬝ ((zero ⬝ zero) ⬝ three)) ~ (one ⬝ (two ⬝ (three ⬝ zero)))</code>",
 "56":
 "<code>Iff (a b : Prop) : Prop</code><span class=\"sep\"></span><code class=\"docstring\">If and only if, or logical bi-implication. `a ↔ b` means that `a` implies `b` and vice versa.\nBy `propext`, this implies that `a` and `b` are equal and hence any expression involving `a`\nis equivalent to the corresponding expression with `b` instead.\n</code>",
 "55":
 "<code>_root_.correctness {α : Type} {e e' : Exp α} : e ~ e' ↔ nbe e = nbe e'</code>",
 "54": "<code>nbe {α : Type} (e : Exp α) : Exp α</code>",
 "53": "<code>_root_.convr_nbe {α : Type} (e : Exp α) : e ~ nbe e</code>",
 "52": "<code>reify {α : Type} (f : Exp α → Exp α) : Exp α</code>",
 "51": "<code>_root_.nbe {α : Type} (e : Exp α) : Exp α</code>",
 "50": "<code>Exp α → Exp α</code>",
 "5": "<code>Exp.elem {α : Type} : α → Exp α</code>",
 "49": "<code>_root_.reify {α : Type} (f : Exp α → Exp α) : Exp α</code>",
 "48":
 "<code>_root_.app_eval {α : Type} (a b : Exp α) : (a ⬝ b) ~ eval a b</code>",
 "47":
 "<code>Eq.{u_1} {α : Sort u_1} : α → α → Prop</code><span class=\"sep\"></span><code class=\"docstring\">The equality relation. It has one introduction rule, `Eq.refl`.\nWe use `a = b` as notation for `Eq a b`.\nA fundamental property of equality is that it is an equivalence relation.\n```\nvariable (α : Type) (a b c d : α)\nvariable (hab : a = b) (hcb : c = b) (hcd : c = d)\n\nexample : a = d :=\n  Eq.trans (Eq.trans hab (Eq.symm hcb)) hcd\n```\nEquality is much more than an equivalence relation, however. It has the important property that every assertion\nrespects the equivalence, in the sense that we can substitute equal expressions without changing the truth value.\nThat is, given `h1 : a = b` and `h2 : p a`, we can construct a proof for `p b` using substitution: `Eq.subst h1 h2`.\nExample:\n```\nexample (α : Type) (a b : α) (p : α → Prop)\n        (h1 : a = b) (h2 : p a) : p b :=\n  Eq.subst h1 h2\n\nexample (α : Type) (a b : α) (p : α → Prop)\n    (h1 : a = b) (h2 : p a) : p b :=\n  h1 ▸ h2\n```\nThe triangle in the second presentation is a macro built on top of `Eq.subst` and `Eq.symm`, and you can enter it by typing `\\t`.\nFor more information: [Equality](https://lean-lang.org/theorem_proving_in_lean4/quantifiers_and_equality.html#equality)\n</code>",
 "46": "<code>a ~ b</code>",
 "45":
 "<code>_root_.convr_eval_eq {α : Type} {a b : Exp α} (h : a ~ b) (c : Exp α) : eval a c = eval b c</code>",
 "44": "<code>eval {α : Type} : Exp α → Exp α → Exp α</code>",
 "43":
 "<code class=\"docstring\">`#reduce &lt;expression&gt;` reduces the expression `&lt;expression&gt;` to its normal form. This\ninvolves applying reduction rules until no further reduction is possible.\n\nBy default, proofs and types within the expression are not reduced. Use modifiers\n`(proofs := true)`  and `(types := true)` to reduce them.\nRecall that propositions are types in Lean.\n\n**Warning:** This can be a computationally expensive operation,\nespecially for complex expressions.\n\nConsider using `#eval &lt;expression&gt;` for simple evaluation/execution\nof expressions.\n</code>",
 "42": "<code>α</code>",
 "41":
 "<code>id.{u} {α : Sort u} (a : α) : α</code><span class=\"sep\"></span><code class=\"docstring\">The identity function. `id` takes an implicit argument `α : Sort u`\n(a type in any universe), and an argument `a : α`, and returns `a`.\n\nAlthough this may look like a useless function, one application of the identity\nfunction is to explicitly put a type on an expression. If `e` has type `T`,\nand `T'` is definitionally equal to `T`, then `@id T' e` typechecks, and Lean\nknows that this expression has type `T'` rather than `T`. This can make a\ndifference for typeclass inference, since `T` and `T'` may have different\ntypeclass instances on them. `show T' from e` is sugar for an `@id T' e`\nexpression.\n</code>",
 "40": "<code>Exp α</code>",
 "4": "<code>Exp.id {α : Type} : Exp α</code>",
 "39": "<code>_root_.eval {α : Type} : Exp α → Exp α → Exp α</code>",
 "38":
 "<code>_root_.example3 : ((one ⬝ two) ⬝ ((zero ⬝ zero) ⬝ three)) ~ ((zero ⬝ (one ⬝ zero)) ⬝ ((zero ⬝ two) ⬝ (three ⬝ zero)))</code>",
 "37":
 "<code>_root_.example2 : ((zero ⬝ (one ⬝ zero)) ⬝ ((zero ⬝ two) ⬝ (three ⬝ zero))) ~ (one ⬝ (two ⬝ (three ⬝ zero)))</code>",
 "36":
 "<code class=\"docstring\">The `sorry` tactic is a temporary placeholder for an incomplete tactic proof,\nclosing the main goal using `exact sorry`.\n\nThis is intended for stubbing-out incomplete parts of a proof while still having a syntactically correct proof skeleton.\nLean will give a warning whenever a proof uses `sorry`, so you aren't likely to miss it,\nbut you can double check if a theorem depends on `sorry` by looking for `sorryAx` in the output\nof the `#print axioms my_thm` command, the axiom used by the implementation of `sorry`.\n</code>",
 "35":
 "<code class=\"docstring\">`by tac` constructs a term of the expected type by running the tactic(s) `tac`. </code>",
 "34": "<code>three : Exp Nat</code>",
 "33": "<code>zero : Exp Nat</code>",
 "32": "<code>two : Exp Nat</code>",
 "31": "<code>one : Exp Nat</code>",
 "30":
 "<code>_root_.example1 : ((one ⬝ two) ⬝ ((zero ⬝ zero) ⬝ three)) ~ (one ⬝ (two ⬝ (three ⬝ zero)))</code>",
 "3": "<code>Exp.app {α : Type} : Exp α → Exp α → Exp α</code>",
 "29": "<code>_root_.three : Exp Nat</code>",
 "28": "<code>_root_.two : Exp Nat</code>",
 "27": "<code>_root_.one : Exp Nat</code>",
 "26":
 "<code>Nat : Type</code><span class=\"sep\"></span><code class=\"docstring\">The type of natural numbers, starting at zero. It is defined as an\ninductive type freely generated by \"zero is a natural number\" and\n\"the successor of a natural number is a natural number\".\n\nYou can prove a theorem `P n` about `n : Nat` by `induction n`, which will\nexpect a proof of the theorem for `P 0`, and a proof of `P (succ i)` assuming\na proof of `P i`. The same method also works to define functions by recursion\non natural numbers: induction and recursion are two expressions of the same\noperation from Lean's point of view.\n\n```\nopen Nat\nexample (n : Nat) : n &lt; succ n := by\n  induction n with\n  | zero =&gt;\n    show 0 &lt; 1\n    decide\n  | succ i ih =&gt; -- ih : i &lt; succ i\n    show succ i &lt; succ (succ i)\n    exact Nat.succ_lt_succ ih\n```\n\nThis type is special-cased by both the kernel and the compiler:\n* The type of expressions contains \"`Nat` literals\" as a primitive constructor,\n  and the kernel knows how to reduce zero/succ expressions to nat literals.\n* If implemented naively, this type would represent a numeral `n` in unary as a\n  linked list with `n` links, which is horribly inefficient. Instead, the\n  runtime itself has a special representation for `Nat` which stores numbers up\n  to 2^63 directly and larger numbers use an arbitrary precision \"bignum\"\n  library (usually [GMP](https://gmplib.org/)).\n</code>",
 "25": "<code>_root_.zero : Exp Nat</code>",
 "24": "<code>convr {α : Type} : Exp α → Exp α → Prop</code>",
 "23": "<code><span class=\"literal string\">\" ~ \"</span> : String</code>",
 "22": "<code>Exp ?m.204</code>",
 "21":
 "<code>convr.app {α : Type} {a b c d : Exp α} : convr a b → convr c d → convr (a ⬝ c) (b ⬝ d)</code>",
 "202":
 "<code>correctnessT {a : Ty} {e e' : ExpT a} : e ~ e' ↔ nbeT a e = nbeT a e'</code>",
 "201":
 "<code>completeness {α : Ty} {e e' : ExpT α} : nbeT α e = nbeT α e' → e ~ e'</code>",
 "200":
 "<code>soundness {α : Ty} {e e' : ExpT α} : e ~ e' → nbeT α e = nbeT α e'</code>",
 "20": "<code>Exp ?m.141</code>",
 "2": "<code>Type</code>",
 "199":
 "<code>Iff.intro {a b : Prop} (mp : a → b) (mpr : b → a) : a ↔ b</code><span class=\"sep\"></span><code class=\"docstring\">If `a → b` and `b → a` then `a` and `b` are equivalent. </code>",
 "198":
 "<code>_root_.correctnessT {a : Ty} {e e' : ExpT a} : e ~ e' ↔ nbeT a e = nbeT a e'</code>",
 "197":
 "<code>_root_.completeness {α : Ty} {e e' : ExpT α} : nbeT α e = nbeT α e' → e ~ e'</code>",
 "196": "<code>_root_.convrT_nbe {α : Ty} {e : ExpT α} : e ~ nbeT α e</code>",
 "195": "<code>_root_.all_R {α : Ty} {e : ExpT α} : R α e</code>",
 "194": "<code>(e'' ⬝ numeral n') ~ nbeT (α ⇒' α) (e'' ⬝ numeral n')</code>",
 "193": "<code>∀ (e' : ExpT α), R α e' → R α (e'' ⬝ numeral n' ⬝ e')</code>",
 "192": "<code>R (α ⇒' α) (e'' ⬝ numeral n')</code>",
 "191":
 "<code class=\"docstring\">The tactic `specialize h a₁ ... aₙ` works on local hypothesis `h`.\nThe premises of this hypothesis, either universal quantifications or\nnon-dependent implications, are instantiated by concrete terms coming\nfrom arguments `a₁` ... `aₙ`.\nThe tactic adds a new hypothesis with the same name `h := h a₁ ... aₙ`\nand tries to clear the previous one.\n</code>",
 "190":
 "<code>∀ (e' : ExpT Ty.Nat), R Ty.Nat e' → R (α ⇒' α) (e'' ⬝ e')</code>",
 "19":
 "<code>convr.trans {α : Type} {e e' e'' : Exp α} : convr e e' → convr e' e'' → convr e e''</code>",
 "189":
 "<code class=\"docstring\">`rcases` is a tactic that will perform `cases` recursively, according to a pattern. It is used to\ndestructure hypotheses or expressions composed of inductive types like `h1 : a ∧ b ∧ c ∨ d` or\n`h2 : ∃ x y, trans_rel R x y`. Usual usage might be `rcases h1 with ⟨ha, hb, hc⟩ | hd` or\n`rcases h2 with ⟨x, y, _ | ⟨z, hxz, hzy⟩⟩` for these examples.\n\nEach element of an `rcases` pattern is matched against a particular local hypothesis (most of which\nare generated during the execution of `rcases` and represent individual elements destructured from\nthe input expression). An `rcases` pattern has the following grammar:\n\n* A name like `x`, which names the active hypothesis as `x`.\n* A blank `_`, which does nothing (letting the automatic naming system used by `cases` name the\n  hypothesis).\n* A hyphen `-`, which clears the active hypothesis and any dependents.\n* The keyword `rfl`, which expects the hypothesis to be `h : a = b`, and calls `subst` on the\n  hypothesis (which has the effect of replacing `b` with `a` everywhere or vice versa).\n* A type ascription `p : ty`, which sets the type of the hypothesis to `ty` and then matches it\n  against `p`. (Of course, `ty` must unify with the actual type of `h` for this to work.)\n* A tuple pattern `⟨p1, p2, p3⟩`, which matches a constructor with many arguments, or a series\n  of nested conjunctions or existentials. For example if the active hypothesis is `a ∧ b ∧ c`,\n  then the conjunction will be destructured, and `p1` will be matched against `a`, `p2` against `b`\n  and so on.\n* A `@` before a tuple pattern as in `@⟨p1, p2, p3⟩` will bind all arguments in the constructor,\n  while leaving the `@` off will only use the patterns on the explicit arguments.\n* An alternation pattern `p1 | p2 | p3`, which matches an inductive type with multiple constructors,\n  or a nested disjunction like `a ∨ b ∨ c`.\n\nA pattern like `⟨a, b, c⟩ | ⟨d, e⟩` will do a split over the inductive datatype,\nnaming the first three parameters of the first constructor as `a,b,c` and the\nfirst two of the second constructor `d,e`. If the list is not as long as the\nnumber of arguments to the constructor or the number of constructors, the\nremaining variables will be automatically named. If there are nested brackets\nsuch as `⟨⟨a⟩, b | c⟩ | d` then these will cause more case splits as necessary.\nIf there are too many arguments, such as `⟨a, b, c⟩` for splitting on\n`∃ x, ∃ y, p x`, then it will be treated as `⟨a, ⟨b, c⟩⟩`, splitting the last\nparameter as necessary.\n\n`rcases` also has special support for quotient types: quotient induction into Prop works like\nmatching on the constructor `quot.mk`.\n\n`rcases h : e with PAT` will do the same as `rcases e with PAT` with the exception that an\nassumption `h : e = PAT` will be added to the context.\n</code>",
 "188": "<code>R_numeral {n : Nat} : R Ty.Nat (numeral n)</code>",
 "187": "<code>R Ty.Nat (numeral n')</code>",
 "186":
 "<code>convrT.recN_succ {α x✝ : Ty} {recN : ExpT (x✝ ⇒' (Ty.Nat ⇒' α ⇒' α) ⇒' Ty.Nat ⇒' α)} {e : ExpT x✝}\n  {f : ExpT (Ty.Nat ⇒' α ⇒' α)} {n : ExpT Ty.Nat} : (recN ⬝ e ⬝ f ⬝ (ExpT.succ ⬝ n)) ~ (f ⬝ n ⬝ (recN ⬝ e ⬝ f ⬝ n))</code>",
 "185": "<code>R α (ExpT.recN ⬝ e' ⬝ e'' ⬝ numeral n')</code>",
 "184":
 "<code class=\"docstring\">`rename_i x_1 ... x_n` renames the last `n` inaccessible names using the given names. </code>",
 "183":
 "<code>convrT.recN_zero {α x✝ : Ty} {recN : ExpT (α ⇒' x✝ ⇒' Ty.Nat ⇒' α)} {e : ExpT α} {f : ExpT x✝} :\n  (recN ⬝ e ⬝ f ⬝ ExpT.zero) ~ e</code>",
 "182": "<code>R α (ExpT.recN ⬝ e' ⬝ e'' ⬝ numeral n✝)</code>",
 "181":
 "<code>Nat.zero : Nat</code><span class=\"sep\"></span><code class=\"docstring\">`Nat.zero`, is the smallest natural number. This is one of the two\nconstructors of `Nat`. Using `Nat.zero` should usually be avoided in favor of\n`0 : Nat` or simply `0`, in order to remain compatible with the simp normal\nform defined by `Nat.zero_eq`. </code>",
 "180":
 "<code class=\"docstring\">Assuming `x` is a variable in the local context with an inductive type,\n`induction x` applies induction on `x` to the main goal,\nproducing one goal for each constructor of the inductive type,\nin which the target is replaced by a general instance of that constructor\nand an inductive hypothesis is added for each recursive argument to the constructor.\nIf the type of an element in the local context depends on `x`,\nthat element is reverted and reintroduced afterward,\nso that the inductive hypothesis incorporates that hypothesis as well.\n\nFor example, given `n : Nat` and a goal with a hypothesis `h : P n` and target `Q n`,\n`induction n` produces one goal with hypothesis `h : P 0` and target `Q 0`,\nand one goal with hypotheses `h : P (Nat.succ a)` and `ih₁ : P a → Q a` and target `Q (Nat.succ a)`.\nHere the names `a` and `ih₁` are chosen automatically and are not accessible.\nYou can use `with` to provide the variables names for each constructor.\n- `induction e`, where `e` is an expression instead of a variable,\n  generalizes `e` in the goal, and then performs induction on the resulting variable.\n- `induction e using r` allows the user to specify the principle of induction that should be used.\n  Here `r` should be a term whose result type must be of the form `C t`,\n  where `C` is a bound variable and `t` is a (possibly empty) sequence of bound variables\n- `induction e generalizing z₁ ... zₙ`, where `z₁ ... zₙ` are variables in the local context,\n  generalizes over `z₁ ... zₙ` before applying the induction but then introduces them in each goal.\n  In other words, the net effect is that each inductive hypothesis is generalized.\n- Given `x : Nat`, `induction x with | zero =&gt; tac₁ | succ x' ih =&gt; tac₂`\n  uses tactic `tac₁` for the `zero` case, and `tac₂` for the `succ` case.\n</code>",
 "18": "<code>Exp ?m.106</code>",
 "179":
 "<code class=\"docstring\">The `simp` tactic uses lemmas and hypotheses to simplify the main goal target or\nnon-dependent hypotheses. It has many variants:\n- `simp` simplifies the main goal target using lemmas tagged with the attribute `[simp]`.\n- `simp [h₁, h₂, ..., hₙ]` simplifies the main goal target using the lemmas tagged\n  with the attribute `[simp]` and the given `hᵢ`'s, where the `hᵢ`'s are expressions.-\n- If an `hᵢ` is a defined constant `f`, then `f` is unfolded. If `f` has equational lemmas associated\n  with it (and is not a projection or a `reducible` definition), these are used to rewrite with `f`.\n- `simp [*]` simplifies the main goal target using the lemmas tagged with the\n  attribute `[simp]` and all hypotheses.\n- `simp only [h₁, h₂, ..., hₙ]` is like `simp [h₁, h₂, ..., hₙ]` but does not use `[simp]` lemmas.\n- `simp [-id₁, ..., -idₙ]` simplifies the main goal target using the lemmas tagged\n  with the attribute `[simp]`, but removes the ones named `idᵢ`.\n- `simp at h₁ h₂ ... hₙ` simplifies the hypotheses `h₁ : T₁` ... `hₙ : Tₙ`. If\n  the target or another hypothesis depends on `hᵢ`, a new simplified hypothesis\n  `hᵢ` is introduced, but the old one remains in the local context.\n- `simp at *` simplifies all the hypotheses and the target.\n- `simp [*] at *` simplifies target and all (propositional) hypotheses using the\n  other hypotheses.\n</code>",
 "178":
 "<code>convr_R_iff {α : Ty} (e e' : ExpT α) : e ~ e' → (R α e ↔ R α e')</code>",
 "177": "<code>n ~ nbeT Ty.Nat n</code>",
 "176":
 "<code class=\"docstring\">Location specifications are used by many tactics that can operate on either the\nhypotheses or the goal. It can have one of the forms:\n* 'empty' is not actually present in this syntax, but most tactics use\n  `(location)?` matchers. It means to target the goal only.\n* `at h₁ ... hₙ`: target the hypotheses `h₁`, ..., `hₙ`\n* `at h₁ h₂ ⊢`: target the hypotheses `h₁` and `h₂`, and the goal\n* `at *`: target all hypotheses and the goal\n</code>",
 "175":
 "<code class=\"docstring\">* `unfold id` unfolds all occurrences of definition `id` in the target.\n* `unfold id1 id2 ...` is equivalent to `unfold id1; unfold id2; ...`.\n* `unfold id at h` unfolds at the hypothesis `h`.\n\nDefinitions can be either global or local definitions.\n\nFor non-recursive global definitions, this tactic is identical to `delta`.\nFor recursive global definitions, it uses the \"unfolding lemma\" `id.eq_def`,\nwhich is generated for each recursive definition, to unfold according to the recursive definition given by the user.\nOnly one level of unfolding is performed, in contrast to `simp only [id]`, which unfolds definition `id` recursively.\n</code>",
 "174": "<code>R Ty.Nat n</code>",
 "173": "<code>(ExpT.recN ⬝ e') ~ (ExpT.recN ⬝ nbeT α e')</code>",
 "172": "<code>e'' ~ nbeT (Ty.Nat ⇒' α ⇒' α) e''</code>",
 "171": "<code>e' ~ nbeT α e'</code>",
 "170":
 "<code class=\"docstring\">Acts like `have`, but removes a hypothesis with the same name as\nthis one if possible. For example, if the state is:\n\n```lean\nf : α → β\nh : α\n⊢ goal\n```\n\nThen after `replace h := f h` the state will be:\n\n```lean\nf : α → β\nh : β\n⊢ goal\n```\n\nwhereas `have h := f h` would result in:\n\n```lean\nf : α → β\nh† : α\nh : β\n⊢ goal\n```\n\nThis can be used to simulate the `specialize` and `apply at` tactics of Coq.\n</code>",
 "17":
 "<code>convr.sym {α : Type} {e e' : Exp α} : convr e e' → convr e' e</code>",
 "169":
 "<code>nbeT (Ty.Nat ⇒' α) (ExpT.recN ⬝ e' ⬝ e'') = ExpT.recN ⬝ nbeT α e' ⬝ nbeT (Ty.Nat ⇒' α ⇒' α) e''</code>",
 "168": "<code>R (Ty.Nat ⇒' α ⇒' α) e''</code>",
 "167":
 "<code>R_convr_nbe {α : Ty} {e : ExpT α} (h : R α e) : e ~ nbeT α e</code>",
 "166":
 "<code>convrT.app {α x✝ : Ty} {a b : ExpT (x✝ ⇒' α)} {c d : ExpT x✝} : a ~ b → c ~ d → (a ⬝ c) ~ (b ⬝ d)</code>",
 "165":
 "<code class=\"docstring\">`clear x...` removes the given hypotheses, or fails if there are remaining\nreferences to a hypothesis.\n</code>",
 "164":
 "<code class=\"docstring\">`rewrite [e]` applies identity `e` as a rewrite rule to the target of the main goal.\nIf `e` is preceded by left arrow (`←` or `&lt;-`), the rewrite is applied in the reverse direction.\nIf `e` is a defined constant, then the equational theorems associated with `e` are used.\nThis provides a convenient way to unfold `e`.\n- `rewrite [e₁, ..., eₙ]` applies the given rules sequentially.\n- `rewrite [e] at l` rewrites `e` at location(s) `l`, where `l` is either `*` or a\n  list of hypotheses in the local context. In the latter case, a turnstile `⊢` or `|-`\n  can also be used, to signify the target of the goal.\n\nUsing `rw (occs := .pos L) [e]`,\nwhere `L : List Nat`, you can control which \"occurrences\" are rewritten.\n(This option applies to each rule, so usually this will only be used with a single rule.)\nOccurrences count from `1`.\nAt each allowed occurrence, arguments of the rewrite rule `e` may be instantiated,\nrestricting which later rewrites can be found.\n(Disallowed occurrences do not result in instantiation.)\n`(occs := .neg L)` allows skipping specified occurrences.\n</code>",
 "163":
 "<code>nbeT ((Ty.Nat ⇒' α ⇒' α) ⇒' Ty.Nat ⇒' α) (ExpT.recN ⬝ e') = ExpT.recN ⬝ nbeT α e'</code>",
 "162":
 "<code class=\"docstring\">The `have` tactic is for adding hypotheses to the local context of the main goal.\n* `have h : t := e` adds the hypothesis `h : t` if `e` is a term of type `t`.\n* `have h := e` uses the type of `e` for `t`.\n* `have : t := e` and `have := e` use `this` for the name of the hypothesis.\n* `have pat := e` for a pattern `pat` is equivalent to `match e with | pat =&gt; _`,\n  where `_` stands for the tactics that follow this one.\n  It is convenient for types that have only one applicable constructor.\n  For example, given `h : p ∧ q ∧ r`, `have ⟨h₁, h₂, h₃⟩ := h` produces the\n  hypotheses `h₁ : p`, `h₂ : q`, and `h₃ : r`.\n</code>",
 "161": "<code>ExpT (Ty.Nat ⇒' α ⇒' α)</code>",
 "160": "<code>R α e'</code>",
 "16": "<code>Exp ?m.87</code>",
 "159":
 "<code class=\"docstring\">Introduces one or more hypotheses, optionally naming and/or pattern-matching them.\nFor each hypothesis to be introduced, the remaining main goal's target type must\nbe a `let` or function type.\n\n* `intro` by itself introduces one anonymous hypothesis, which can be accessed\n  by e.g. `assumption`.\n* `intro x y` introduces two hypotheses and names them. Individual hypotheses\n  can be anonymized via `_`, or matched against a pattern:\n  ```lean\n  -- ... ⊢ α × β → ...\n  intro (a, b)\n  -- ..., a : α, b : β ⊢ ...\n  ```\n* Alternatively, `intro` can be combined with pattern matching much like `fun`:\n  ```lean\n  intro\n  | n + 1, 0 =&gt; tac\n  | ...\n  ```\n</code>",
 "158": "<code>convrT.refl {α : Ty} {e : ExpT α} : e ~ e</code>",
 "157":
 "<code>And.intro {a b : Prop} (left : a) (right : b) : a ∧ b</code><span class=\"sep\"></span><code class=\"docstring\">`And.intro : a → b → a ∧ b` is the constructor for the And operation. </code>",
 "156":
 "<code class=\"docstring\">`apply e` tries to match the current goal against the conclusion of `e`'s type.\nIf it succeeds, then the tactic returns as many subgoals as the number of premises that\nhave not been fixed by type inference or type class resolution.\nNon-dependent premises are added before dependent ones.\n\nThe `apply` tactic uses higher-order pattern matching, type class resolution,\nand first-order unification with dependent types.\n</code>",
 "155": "<code>_root_.R_numeral {n : Nat} : R Ty.Nat (numeral n)</code>",
 "154":
 "<code>_root_.convr_R_iff {α : Ty} (e e' : ExpT α) : e ~ e' → (R α e ↔ R α e')</code>",
 "153": "<code>R (a : Ty) (e : ExpT a) : Prop</code>",
 "152": "<code>R α e</code>",
 "151":
 "<code>_root_.R_convr_nbe {α : Ty} {e : ExpT α} (h : R α e) : e ~ nbeT α e</code>",
 "150": "<code>ExpT (α ⇒' β)</code>",
 "15": "<code>convr.refl {α : Type} {e : Exp α} : convr e e</code>",
 "149": "<code>_root_.R (a : Ty) (e : ExpT a) : Prop</code>",
 "148": "<code>nbeT (a : Ty) (e : ExpT a) : ExpT a</code>",
 "147":
 "<code>_root_.soundness {α : Ty} {e e' : ExpT α} : e ~ e' → nbeT α e = nbeT α e'</code>",
 "146": "<code>_root_.nbeT (a : Ty) (e : ExpT a) : ExpT a</code>",
 "145": "<code>ExpT_inter (a : Ty) (e : ExpT a) : Ty_inter a</code>",
 "144":
 "<code>_root_.convrT_eval_eq {a : Ty} {e e' : ExpT a} : e ~ e' → ExpT_inter a e = ExpT_inter a e'</code>",
 "143":
 "<code>Nat.rec.{u} {motive : Nat → Sort u} (zero : motive Nat.zero) (succ : (n : Nat) → motive n → motive n.succ) (t : Nat) :\n  motive t</code>",
 "142": "<code>Ty_inter (Ty.Nat ⇒' a ⇒' a)</code>",
 "141":
 "<code>appsem {a b : Ty} (t : Ty_inter (a ⇒' b)) (e' : Ty_inter a) : Ty_inter b</code>",
 "140": "<code>Ty_inter (a ⇒' b ⇒' c)</code>",
 "14": "<code>Exp ?m.77</code>",
 "139": "<code>Ty_inter b</code>",
 "138": "<code>reifyT (a : Ty) (e : Ty_inter a) : ExpT a</code>",
 "137": "<code>_root_.ExpT_inter (a : Ty) (e : ExpT a) : Ty_inter a</code>",
 "136":
 "<code>Prod.snd.{u, v} {α : Type u} {β : Type v} (self : α × β) : β</code><span class=\"sep\"></span><code class=\"docstring\">The second projection out of a pair. if `p : α × β` then `p.2 : β`. </code>",
 "135":
 "<code>_root_.appsem {a b : Ty} (t : Ty_inter (a ⇒' b)) (e' : Ty_inter a) : Ty_inter b</code>",
 "134":
 "<code>Prod.fst.{u, v} {α : Type u} {β : Type v} (self : α × β) : α</code><span class=\"sep\"></span><code class=\"docstring\">The first projection out of a pair. if `p : α × β` then `p.1 : α`. </code>",
 "133": "<code>Ty_inter (a ⇒' b)</code>",
 "132": "<code>numeral : Nat → ExpT Ty.Nat</code>",
 "131":
 "<code class=\"docstring\">* `case tag =&gt; tac` focuses on the goal with case name `tag` and solves it using `tac`,\n  or else fails.\n* `case tag x₁ ... xₙ =&gt; tac` additionally renames the `n` most recent hypotheses\n  with inaccessible names to the given names.\n* `case tag₁ | tag₂ =&gt; tac` is equivalent to `(case tag₁ =&gt; tac); (case tag₂ =&gt; tac)`.\n</code>",
 "130": "<code>Ty_inter (a✝¹ ⇒' a✝)</code>",
 "13":
 "<code>convr.id_right {α : Type} {e : Exp α} : convr (e ⬝ Exp.id) e</code>",
 "129": "<code>Ty_inter Ty.Nat</code>",
 "128":
 "<code class=\"docstring\">Assuming `x` is a variable in the local context with an inductive type,\n`cases x` splits the main goal, producing one goal for each constructor of the\ninductive type, in which the target is replaced by a general instance of that constructor.\nIf the type of an element in the local context depends on `x`,\nthat element is reverted and reintroduced afterward,\nso that the case split affects that hypothesis as well.\n`cases` detects unreachable cases and closes them automatically.\n\nFor example, given `n : Nat` and a goal with a hypothesis `h : P n` and target `Q n`,\n`cases n` produces one goal with hypothesis `h : P 0` and target `Q 0`,\nand one goal with hypothesis `h : P (Nat.succ a)` and target `Q (Nat.succ a)`.\nHere the name `a` is chosen automatically and is not accessible.\nYou can use `with` to provide the variables names for each constructor.\n- `cases e`, where `e` is an expression instead of a variable, generalizes `e` in the goal,\n  and then cases on the resulting variable.\n- Given `as : List α`, `cases as with | nil =&gt; tac₁ | cons a as' =&gt; tac₂`,\n  uses tactic `tac₁` for the `nil` case, and `tac₂` for the `cons` case,\n  and `a` and `as'` are used as names for the new variables introduced.\n- `cases h : e`, where `e` is a variable or an expression,\n  performs cases on `e` as above, but also adds a hypothesis `h : e = ...` to each hypothesis,\n  where `...` is the constructor instance for that particular case.\n</code>",
 "127": "<code>Ty_inter : Ty → Type</code>",
 "126": "<code>Ty_inter a</code>",
 "125": "<code>_root_.reifyT (a : Ty) (e : Ty_inter a) : ExpT a</code>",
 "124": "<code>Nat</code>",
 "123": "<code>_root_.numeral : Nat → ExpT Ty.Nat</code>",
 "122": "<code>_root_.Ty_inter : Ty → Type</code>",
 "121": "<code>power (m : ExpT Ty.Nat) : ExpT (Ty.Nat ⇒' Ty.Nat)</code>",
 "120": "<code>_root_.power (m : ExpT Ty.Nat) : ExpT (Ty.Nat ⇒' Ty.Nat)</code>",
 "12": "<code>Exp ?m.63</code>",
 "119": "<code>mult (m : ExpT Ty.Nat) : ExpT (Ty.Nat ⇒' Ty.Nat)</code>",
 "118": "<code>_root_.mult (m : ExpT Ty.Nat) : ExpT (Ty.Nat ⇒' Ty.Nat)</code>",
 "117": "<code>add (m : ExpT Ty.Nat) : ExpT (Ty.Nat ⇒' Ty.Nat)</code>",
 "116": "<code>_root_.add (m : ExpT Ty.Nat) : ExpT (Ty.Nat ⇒' Ty.Nat)</code>",
 "115": "<code>B {a b c : Ty} : ExpT ((b ⇒' c) ⇒' (a ⇒' b) ⇒' a ⇒' c)</code>",
 "114": "<code>ExpT a</code>",
 "113": "<code>ExpT (a ⇒' b)</code>",
 "112": "<code>ExpT (b ⇒' c)</code>",
 "111":
 "<code>_root_.B {a b c : Ty} : ExpT ((b ⇒' c) ⇒' (a ⇒' b) ⇒' a ⇒' c)</code>",
 "110": "<code>I {α β : Ty} : ExpT (α ⇒' α)</code>",
 "11":
 "<code>convr.id_left {α : Type} {e : Exp α} : convr (Exp.id ⬝ e) e</code>",
 "109": "<code>ExpT α</code>",
 "108": "<code>_root_.I {α β : Ty} : ExpT (α ⇒' α)</code>",
 "107": "<code>convrT {α : Ty} : ExpT α → ExpT α → Prop</code>",
 "106": "<code>ExpT Ty.Nat</code>",
 "105": "<code>ExpT (Ty.Nat ⇒' ?m.1873 ⇒' ?m.1873)</code>",
 "104": "<code>ExpT ?m.1761</code>",
 "103":
 "<code>ExpT (?m.1761 ⇒' (Ty.Nat ⇒' ?m.1873 ⇒' ?m.1873) ⇒' Ty.Nat ⇒' ?m.1873)</code>",
 "102":
 "<code>convrT.recN_succ {α x✝ : Ty} {recN : ExpT (x✝ ⇒' (Ty.Nat ⇒' α ⇒' α) ⇒' Ty.Nat ⇒' α)} {e : ExpT x✝}\n  {f : ExpT (Ty.Nat ⇒' α ⇒' α)} {n : ExpT Ty.Nat} : convrT (recN ⬝ e ⬝ f ⬝ (ExpT.succ ⬝ n)) (f ⬝ n ⬝ (recN ⬝ e ⬝ f ⬝ n))</code>",
 "101": "<code>ExpT ?m.1380</code>",
 "100": "<code>ExpT ?m.1379</code>",
 "10": "<code>Exp ?m.47</code>",
 "1": "<code>_root_.Exp (α : Type) : Type</code>",
 "0":
 "<code class=\"docstring\">In Lean, every concrete type other than the universes\nand every type constructor other than dependent arrows\nis an instance of a general family of type constructions known as inductive types.\nIt is remarkable that it is possible to construct a substantial edifice of mathematics\nbased on nothing more than the type universes, dependent arrow types, and inductive types;\neverything else follows from those.\nIntuitively, an inductive type is built up from a specified list of constructors.\nFor example, `List α` is the list of elements of type `α`, and is defined as follows:\n```\ninductive List (α : Type u) where\n| nil\n| cons (head : α) (tail : List α)\n```\nA list of elements of type `α` is either the empty list, `nil`,\nor an element `head : α` followed by a list `tail : List α`.\nSee [Inductive types](https://lean-lang.org/theorem_proving_in_lean4/inductive_types.html)\nfor more information.\n</code>"}